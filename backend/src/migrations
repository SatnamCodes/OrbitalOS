CREATE TABLE launches (
    id UUID PRIMARY KEY,
    provider_id UUID REFERENCES providers(id),
    launch_name TEXT NOT NULL,
    launch_date TIMESTAMPTZ NOT NULL,
    orbit_type TEXT NOT NULL,
    payload_capacity_kg INT NOT NULL
);

CREATE TABLE bookings (
    id UUID PRIMARY KEY,
    launch_id UUID REFERENCES launches(id),
    user_id UUID REFERENCES users(id),
    payload_description TEXT,
    booking_date TIMESTAMPTZ NOT NULL,
    status TEXT NOT NULL
);
CREATE TABLE mock_transactions (
    id UUID PRIMARY KEY,
    booking_id UUID REFERENCES bookings(id),
    status TEXT NOT NULL CHECK(status IN ('success', 'failed')),
    transaction_date TIMESTAMPTZ NOT NULL
);
#[derive(Deserialize)]
pub struct MockTransactionRequest {
    pub booking_id: Uuid,
}

pub async fn process_mock_transaction(
    Extension(pool): Extension<PgPool>,
    Json(payload): Json<MockTransactionRequest>,
) -> impl IntoResponse {
    let transaction_id = Uuid::new_v4();
    let now = chrono::Utc::now();

    let res = sqlx::query!(
        "INSERT INTO mock_transactions (id, booking_id, status, transaction_date) VALUES ($1, $2, 'success', $3)",
        transaction_id, payload.booking_id, now,
    )
    .execute(&pool)
    .await;

    if res.is_err() {
        return (axum::http::StatusCode::INTERNAL_SERVER_ERROR, "Failed to create transaction").into_response();
    }

    (axum::http::StatusCode::OK, "Payment success (mock)").into_response()
}
.route("/api/payments/mock", post(process_mock_transaction))
CREATE TABLE compliance_reports (
    id UUID PRIMARY KEY,
    provider_id UUID REFERENCES providers(id),
    report_date TIMESTAMPTZ NOT NULL,
    encrypted_pdf BYTEA NOT NULL
);
use printpdf::{PdfDocument, PdfPage, PdfLayer, Mm, Pt};
use anyhow::Result;

pub fn generate_pdf_report(report_text: &str) -> Result<Vec<u8>> {
    let (doc, page1, layer1) = PdfDocument::new("Compliance Report", Mm(210.0), Mm(297.0), "Layer 1");

    let current_layer = doc.get_page(page1).get_layer(layer1);

    // Add simple text
    let font = doc.add_external_font(std::fs::File::open("fonts/Helvetica.ttf")?)?;

    current_layer.use_text(report_text, 12.0, Mm(10.0), Mm(280.0), &font);

    let mut buffer = Vec::new();
    doc.save(&mut buffer)?;

    Ok(buffer)
}
